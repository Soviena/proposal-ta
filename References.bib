@incollection{doyen2014explicit,
  title={An explicit staggered finite volume scheme for the shallow water equations},
  author={Doyen, David and Gunawan, Putu Harry},
  booktitle={Finite Volumes for Complex Applications VII-Methods and Theoretical Aspects},
  pages={227--235},
  year={2014},
  publisher={Springer}
}
@article{gunawan2015hydrostatic,
  title={Hydrostatic relaxation scheme for the 1D shallow water-Exner equations in bedload transport},
  author={Gunawan, Putu Harry and Lh{\'e}brard, Xavier},
  journal={Computers \& Fluids},
  volume={121},
  pages={44--50},
  year={2015},
  publisher={Elsevier}
}
@book{toro2013riemann,
  title={Riemann solvers and numerical methods for fluid dynamics: a practical introduction},
  author={Toro, Eleuterio F},
  year={2013},
  publisher={Springer Science \& Business Media}
}
@article{Kentang,
  title={Asymptotic speeds of spread and traveling waves for integral equations and delayed reaction--diffusion models},
  author={Thieme, Horst R and Zhao, Xiao-Qiang},
  journal={Journal of Differential Equations},
  volume={195},
  number={2},
  pages={430--470},
  year={2003},
  publisher={Elsevier}
}

@inproceedings{giessler2015best,
  title={Best practices for the design of restful web services},
  author={Giessler, Pascal and Gebhart, Michael and Sarancin, Dmitrij and Steinegger, Roland and Abeck, Sebastian},
  booktitle={International Conferences of Software Advances (ICSEA)},
  pages={392--397},
  year={2015}
}
@inproceedings{Aghajani2018,
   abstract = {The concept of monolithic stand-Alone software systems developed completely from scratch has become obsolete, as modern systems nowadays leverage the abundant presence of Application Programming Interfaces (APIs) developed by third parties, which leads on the one hand to accelerated development, but on the other hand introduces potentially fragile dependencies on external resources. In this context, the design of any API strongly influences how developers write code utilizing it. A wrong design decision like a poorly chosen method name can lead to a steeper learning curve, due to misunderstandings, misuse and eventually bug-prone code in the client projects using the API. It is not unfrequent to find APIs with poorly expressive or misleading names, possibly lacking appropriate documentation. Such issues can manifest in what have been defined in the literature as Linguistic Antipatterns (LAs), i.e., inconsistencies among the naming, documentation, and implementation of a code entity. While previous studies showed the relevance of LAs for software developers, their impact on (developers of) client projects using APIs affected by LAs has not been investigated. This paper fills this gap by presenting a large-scale study conducted on 1.6k releases of popular Maven libraries, 14k open-source Java projects using these libraries, and 4.4k questions related to the investigated APIs asked on Stack Overflow. In particular, we investigate whether developers of client projects have higher chances of introducing bugs when using APIs affected by LAs and if these trigger more questions on Stack Overflow as compared to non-Affected APIs.},
   author = {Emad Aghajani and Csaba Nagy and Gabriele Bavota and Michele Lanza},
   doi = {10.1109/ICSME.2018.00012},
   isbn = {9781538678701},
   journal = {Proceedings - 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018},
   keywords = {Application Programming Interfaces (APIs),Empirical Study,Linguistic Antipatterns},
   month = {11},
   pages = {25-35},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {A Large-scale empirical study on linguistic antipatterns affecting apis},
   booktitle = {Soft System Stakeholder Analysis Methodology},
   year = {2018},
}
@article{Chukwunonso2023,
   abstract = {In this study, a queue management model/software was developed for automobile repair shops. This software minimizes both waiting time of customers, and idle time of workers. The software groups all jobs done in an automobile repair shop into three sections: mechanical, electrical and air conditioning (A/C) sections. The developed software prioritizes all jobs performed in a typical automobile repair shop in terms of urgency, using the ‘shortest processing time’ scheduling approach. The jobs are then ranked and assigned to workers based on number of available workstations. Also, expected time of delivery of the job is estimated by the software. The software was tested using data obtained over a two weeks period and percentage reduction in waiting time was found to range between: 0.889-0.122, 0.895-0.25 and 1-0.167 for the mechanical, electrical and A/C sections respectively. In the mechanical section, servicing/replacement of piston and rings and changing/servicing of gear box were discovered to be the jobs with maximum delivery time (15 hrs) while changing of engine belt was seen as the job with the least delivery time (0.3 hrs). For the electrical section, changing of alternator, with delivery time of 3 hrs 30 mins and changing of headlamp and fuse breakage with delivery time of 0.15 hrs are the jobs with maximum and minimum delivery times respectively. For the A/C section, changing of freezer with delivery time of 10 hrs and refilling of gas with delivery time of 0.10 hrs are the maximum and minimum respectively. Implementation of this research will reduce time wastage experienced by customers, idle time at service facilities, frustration caused by unnecessary queue, and encourage allocation of resources accordingly.},
   author = {Chukwunonso and U. Nwaiwu and E. Ukachukwu and V. Udo},
   doi = {10.4314/njt.v42i3.6},
   issn = {24678821},
   issue = {3},
   journal = {Nigerian Journal of Technology},
   keywords = {Automobile repair,Delivery time,Queue,Queue management,Scheduling,Shortest operation time},
   month = {11},
   pages = {339-346},
   publisher = {University of Nigeria Faculty of Engineering},
   title = {DEVELOPMENT OF QUEUE MANAGEMENT MODEL FOR EFFECTIVE SERVICE DELIVERY IN AUTOMOBILE REPAIR SHOPS},
   volume = {42},
   year = {2023},
}
@article{Rista2023,
   abstract = {PT GMF Aero Asia, Tbk, has an application that integrates all needs in terms of maintenance and management, especially in component status, using SAP Swift tools. However, SAP Swift has several areas for improvement, namely repeated findings due to limitations on component data repair in SAP SWIFT, preparation for each status done manually, and inability to quickly address customer needs for increased audit needs. Therefore, we need a website-based application that can display status automatically, has capabilities in data processing, displays notifications of differences between previous and new data, and can receive data sent from SAP Swift. The Front-End design of this application uses the vue.js framework, and the Back-End design uses Nest.js, which is integrated with PostgreSQL as a DBMS. In the final stage, before users use this application, a REST API test is carried out using POSTMAN with excellent test results according to user scenarios.},
   author = {Rayhan Dhiya Rista Rista and Jansen Wiratama},
   doi = {10.33379/gtech.v7i3.2652},
   issn = {2580-8737},
   issue = {3},
   journal = {G-Tech: Jurnal Teknologi Terapan},
   month = {7},
   pages = {1013-1025},
   publisher = {Universitas Islam Raden Rahmat Malang},
   title = {The Development of Web-Based Application For Reporting Status Component at Aircraft Maintenance, Repair, and Overhaul (MRO) Industry},
   volume = {7},
   year = {2023},
}
@article{rasheed2023developing,
  title={Developing an Electronic Health Records System Based on the National Identity by Using Angular Web Application Framework},
  author={Rasheed, Mustafa Mohammed and Alsaedi, Muneera and Al Ibraheemi, Ahmed},
  journal={Applied Data Science and Analysis},
  volume={2023},
  pages={102--107},
  year={2023}
}
@article{Brito2019,
   abstract = {GraphQL is a novel query language proposed by Facebook to implement Web-based APIs. In this paper, we present a practical study on migrating API clients to this new technology. First, we conduct a grey literature review to gain an in-depth understanding on the benefits and key characteristics normally associated to GraphQL by practitioners. After that, we assess such benefits in practice, by migrating seven systems to use GraphQL, instead of standard REST-based APIs. As our key result, we show that GraphQL can reduce the size of the JSON documents returned by REST APIs in 94% (in number of fields) and in 99% (in number of bytes), both median results.},
   author = {Gleison Brito and Thais Mombach and Marco Tulio Valente},
   doi = {10.1109/SANER.2019.8667986},
   month = {6},
   title = {Migrating to GraphQL: A Practical Assessment},
   url = {http://arxiv.org/abs/1906.07535 http://dx.doi.org/10.1109/SANER.2019.8667986},
   year = {2019},
}
@article{Freitas2023,
   abstract = {In the last few years we have been seeing a drastic change in the way software is developed. Large-scale software projects are being assembled by a flexible composition of many (small) components possibly written in different programming languages and deployed anywhere in the cloud — the so-called microservices-based applications. The dramatic growth in popularity of microservices-based applications has pushed several companies to apply major refactorings to their software systems. However, this is a challenging task that may take several months or even years. We propose a methodology to automatically evolve monolithic web applications that use object-relational mapping into microservices-based ones. Our methodology receives the source code and a microservices proposal and refactors the original code to create each microservice. Our methodology creates an API for each method call to classes that are in other services. The database entities are also refactored to be included in the corresponding service. The evaluation performed in 120 applications shows that our tool can successfully refactor about 72% of them. The execution of the unit tests in both versions of the applications yield exactly the same results.},
   author = {Francisco Freitas and André Ferreira and Jácome Cunha},
   doi = {10.1016/j.cola.2023.101205},
   issn = {25901184},
   journal = {Journal of Computer Languages},
   keywords = {Java,Microservices,Migration,Monolithic decomposition,ORM,Refactoring,Software evolution},
   month = {6},
   publisher = {Elsevier Ltd},
   title = {A methodology for refactoring ORM-based monolithic web applications into microservices},
   volume = {75},
   year = {2023},
}
@inproceedings{Ahmad2021,
   abstract = {The Covid-19 that hit the world had an impact on the economy, especially in the trade sector, one of which was experienced by Small and Medium Enterprises (SMEs). Hanura Takeaway (Haway) is an SME engaged in the delivery of goods and food. To facilitate transactions for goods and food delivery services, it is necessary to develop applications that simplify the transaction process. In developing web services, it is necessary to exchange data that is accessed via standard internet protocols. Therefore, we need a web service in developing this application. Implementing a RESTful API web service will certainly facilitate the development of software applications outside the system or with different programming languages or platforms. This research will develop web service architecture using RESTful API in Takeaway application. To optimize the URI, several parameters are used, including filtering, sorting, selection and pagination. The Takeaway application consists of a website as a backend and an Android-based as a frontend. From the test results based on the function method using the Postman application, it shows that the REST API Sever built on the server has been running well. In testing the response time using the Apache JMeter application, the application shows a good response time. Meanwhile, the comparison of responses and requests to SOAP and REST architectures shows that REST takes faster time.},
   author = {Imam Ahmad and Emi Suwarni and Rohmat Indra Borman and Asmawati and Farli Rossi and Yessi Jusman},
   doi = {10.1109/ICE3IS54102.2021.9649679},
   isbn = {9781665405461},
   journal = {2021 1st International Conference on Electronic and Electrical Engineering and Intelligent System, ICE3IS 2021},
   keywords = {RESTful API,application development,web services},
   pages = {132-137},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Implementation of RESTful API Web Services Architecture in Takeaway Application Development},
   year = {2021},
}
@inproceedings{gos2020comparison,
  title={The comparison of microservice and monolithic architecture},
  author={Gos, Konrad and Zabierowski, Wojciech},
  booktitle={2020 IEEE XVIth International Conference on the Perspective Technologies and Methods in MEMS Design (MEMSTECH)},
  pages={150--153},
  year={2020},
  organization={IEEE}
}
@book{Pitt2021,
   abstract = {Examine the building blocks that make any good MVC framework using PHP 8. This book exposes all the considerations that many developers take for granted when using a popular framework, and teaches you how to make this MVC framework your own. You'll quickly get started writing your first bit of framework code, then, you build a variety of examples using aspects of an MVC framework, including a router, a template engine, a database library, a persistence engine (ORM), and a testing framework. In the next section, you'll implement sessions, caches, file systems, queues, logging, and mail. You'll wrap up by building a larger scale sample web application: a sales website for a company that sells rockets. Along the way, this book lays bare all the secret parts of MVC to take with you to apply to your own PHP-based MVC projects. What You Will Learn Build PHP-based web applications using the model view controller (MVC) architecture Write your first bit of framework code Compare the code you write with how the popular frameworks do the same kinds of things Create various aspects of applications, engines, and other frameworks Wrap up with a sample case study application Who This Book Is For Experienced PHP and web developers. Some prior experience with PHP and web development at least recommended.},
   author = {Christopher Pitt},
   doi = {10.1007/978-1-4842-6957-2},
   isbn = {9781484269572},
   journal = {Pro PHP 8 MVC: Model View Controller Architecture-Driven Application Development},
   keywords = {Application,Architecture,Cloud,Hypertext,MVC,Model view controller,Native,PHP 8,Pattern,Programming,Scripting,Software,Source,Web Development},
   month = {5},
   pages = {1-367},
   publisher = {Springer},
   title = {Pro PHP 8 MVC: Model View Controller Architecture-Driven Application Development},
   year = {2021},
}
@article{Odeniran2023,
   abstract = {Most people interact with websites expecting them to perform quick results and provide quick responses to their requests and many do not realize the performance is due to server side or backend programming. There are several types of backend web framework/scripting technologies. Programmers and developers often debate over which is the technologies is the better solution. Most debates are based on various dimensions such as performance, scalability, and architecture. The most common factor for settling the debate or choosing the most appropriate frameworks tends to be the performance dimension. This study assesses the performance of both Node.js and PHP by implementing well-known algorithms of binary, bubble, and quick sort along with Heap’s algorithm for permutations. These algorithms were selected for their increasing time complexities which allows us to observe the performance differences between the backend framework/scripting. By comparing the performance of these two backend scripting technologies, one can gain a better understanding of the circumstances when migrating from PHP to Node.js would be beneficial. Our results showed that a significant difference occurs in the performance of PHP and Node.js and specifically, Node.js outperformed PHP in terms of latency and other performance metrics. This study provides valuable information for software engineers, developers, and managers who are seeking the best framework for their web applications.},
   author = {Qozeem Odeniran and Hayden Wimmer and Carl M. Rebman},
   doi = {10.48009/1_iis_2023_128},
   issn = {15297314},
   issue = {1},
   journal = {Issues in Information Systems},
   keywords = {Apache JMeter,Node.js,PHP,backend scripting technologies,performance,sorting algorithms},
   pages = {328-341},
   publisher = {International Association for Computer Information Systems},
   title = {Node.js or PhP? Determining the better website server backend scripting language},
   volume = {24},
   year = {2023},
}
@misc{Zmaranda2020,
   abstract = {Most applications available nowadays are using an Object Relational Mapper (ORM) to access and save data. The additional layer that is being wrapped over the database induces a performance impact in detrimental of raw SQL queries; on the other side, the advantages of using ORMs by focusing on domain level through application development represent a premise for easier development and simpler code maintenance. In this context, this paper makes a performance comparison between three of the most used ORM technologies from the .NET family: Entity Framework Core 2.2, nHibernate 5.2.3 and Dapper 1.50.5. The main objective of the paper is to make a comparative analysis of the impact that a specific ORM has on application performance when realizing database requests. In order to perform the analysis, a specific testing architecture was designed to ensure the consistency of tests. Performance evaluation for time responses and memory usage for each technology was done using the same CRUD (Create Read Update Delete) operations on the database. The results obtained proved that the decision to use one of another is dependent of the most used type of operation. A comprehensive discussion based on results analysis is done in order to support a decision for choosing a specific ORM by the software engineers in the process of software design and development.},
   author = {Doina Zmaranda and Lucian-Laurentiu Pop-Fele and Cornelia Győrödi and Robert Győrödi and George Pecherle},
   issue = {1},
   journal = {IJACSA) International Journal of Advanced Computer Science and Applications},
   keywords = {CRUD (Create Read Update Delete) operations,ORM (Object Relational Mapper),domain-level development,performance evaluation},
   title = {Performance Comparison of CRUD Methods using NET Object Relational Mappers: A Case Study},
   volume = {11},
   url = {www.ijacsa.thesai.org},
   year = {2020},
}
@misc{Uddin2016,
   abstract = {Automated queue management system is a system that helps service provider to manage customer in efficient way. The system can ease the customer flow management which is useful for manager of the service provider. The purpose of this project is to develop an Automated Queue Management System for organizing queuing system that can analyze the queue status and take decision which customer to be served first. This project focuses more on the banks queuing system, different queuing algorithm approaches which are used in banks to serve customer and the average waiting time. This queuing architecture model can switch between different scheduling algorithms according to the testing result i.e. the average waiting time by using two different queue control systems, which have developed. There are several process undergo, which control by Intel Galileo Microcontroller that is software-compatible with the Arduino software development environment. Finally, the systems have been tested under different conditions to evaluate its performance.},
   author = {Md Nasir Uddin and Mm Rashid and Mg Mostafa and Sm Salam and Na Nithe and S Z Ahmed},
   journal = {Type: Double Blind Peer Reviewed International Research Journal Publisher: Global Journals Inc},
   title = {Automated Queue Management System},
   volume = {16},
   url = {http://creativecommons.},
   year = {2016},
}
@inproceedings{Patnaik2021,
   abstract = {In today’s fast-paced life real-time communication with everyone is essential as well as appreciated by everyone. This study introduces a real-time database server called the Google Firebase API and it features through a web messaging app. A real-time database is the type of database that stores and fetches the data stored in it very quickly. But firebase’s this feature is just tip of the iceberg, it’s much more than that it provides developers with a variety of features that not just creates a secure system but also develop communication- based applications with ease. This article will cover how firebase helps backend as well as storage purpose of an application and reduces the burden from the technical point of view.},
   author = {Rahul Patnaik and Rajesh Pradhan and Smita Rath and Chandan Mishra and Lagnajeet Mohanty},
   doi = {10.1007/978-981-15-5971-6_50},
   isbn = {9789811559709},
   issn = {21903026},
   journal = {Smart Innovation, Systems and Technologies},
   keywords = {Authentication,Cloud messaging,Google firebase API,Real-time database},
   pages = {461-469},
   publisher = {Springer Science and Business Media Deutschland GmbH},
   title = {Study on Google Firebase for Real-Time Web Messaging},
   volume = {194},
   year = {2021},
}
@article{Brito2020,
   abstract = {GraphQL is a novel query language for implementing service-based software architectures. The language is gaining momentum and it is now used by major software companies, such as Facebook and GitHub. However, we still lack empirical evidence on the real gains achieved by GraphQL, particularly in terms of the effort required to implement queries in this language. Therefore, in this paper we describe a controlled experiment with 22 students (10 undergraduate and 12 graduate), who were asked to implement eight queries for accessing a web service, using GraphQL and REST. Our results show that GraphQL requires less effort to implement remote service queries when compared to REST (9 vs 6 minutes, median times). These gains increase when REST queries include more complex endpoints, with several parameters. Interestingly, GraphQL outperforms REST even among more experienced participants (as is the case of graduate students) and among participants with previous experience in REST, but no previous experience in GraphQL.},
   author = {Gleison Brito and Marco Tulio Valente},
   month = {3},
   title = {REST vs GraphQL: A Controlled Experiment},
   url = {http://arxiv.org/abs/2003.04761},
   year = {2020},
}
@article{Ghazal2016,
   abstract = {This paper proposes a solution to the problem of client dissatisfaction with long waiting times associated with some services. This solution is a smart queue management system that provides real-time visual and audio updates to service requests via a smartphone app. Users receive digital tickets and are free to leave the waiting area until it is their turn to be served. If they choose to remain in the area, they have the option of listening to the signal of the television set that is typically muted for a better experience. The system comprises connected units forming a web of things. There are units for ticket registration and verification, audio capturing and streaming, queue management, and user units as smartphone applications. We have tested this system to ensure its functionality and report our results and possible improvements.},
   author = {Mohammed Ghazal and Rania Hamouda and Samr Ali},
   doi = {10.12785/IJCDS/050402},
   issn = {2210142X},
   issue = {4},
   journal = {International Journal of Computing and Digital Systems},
   keywords = {Internet of things,Mobile computing,Near field communication,Queuing management systems},
   month = {7},
   pages = {305-313},
   publisher = {University of Bahrain},
   title = {A smart mobile system for the real-time tracking and management of service queues},
   volume = {5},
   year = {2016},
}
@inproceedings{khong2017queue,
  title={E-Queue mobile application},
  author={Khong, Yeen Lai and Ooi, Bee Chen and Tan, Kok Eng and Ibrahim, Salizatul Aizah Binti and Tee, Peck Ling},
  booktitle={SHS Web of Conferences},
  volume={33},
  pages={00033},
  year={2017},
  organization={EDP Sciences}
}
@article{Beer2018,
   abstract = {In this modern era of enterprise computing, the enterprise application integration (EAI) is a well-known industry-recognized architectural principle that is built based on loosely coupled application architecture, where service-oriented architecture (SOA) is the architectural pattern for the implementation of EAI, whose computational elements are called as “services.” Though SOA can be implemented in a wide range of technologies, the web services implementation of SOA becomes the current selective choice due to its simplicity that works on basic Internet protocols. Web service technology defines several supporting protocols and specifications such as SOAP and WSDL for communication with client and server for data interchange. A new architectural paradigm has emerged in SOA in recent years called REpresentational State Transfer (REST) that is also used to integrate loosely coupled service components, named RESTful web services, by system integration consortiums. This SOA implementation does not possess adequate security solutions within it, and its security is completely dependent on network/transport layer security that is obsolete owing to latest web technologies such as Web 2.0 and its upgraded version, Web 3.0. Vendor security products have major implementation constraints such as they need secured organizational environment and breach to SOA specifications, hence introducing new vulnerabilities. Herein, we examine the security vulnerabilities of RESTful web services in the view of popular OWASP rating methodologies and analyze the gaps in the existing security solutions. We hence propose an adaptive security solution for REST that uses public key infrastructure techniques to enhance the security architecture. The proposed security architecture is constructed as an adaptive way-forward Internet-of-Things (IoT) friendly security solution that is comprised of three cyclic parts: learn, predict and prevent. A novel security component named “intelligent security engine” is introduced which learns the possible occurrences of security threats on SOA using artificial neural networks learning algorithms, then it predicts the potential attacks on SOA based on obtained results by the developed theoretical security model, and the written algorithms as part of security solution prevent the SOA attacks. This paper is written to present one of such algorithms to prevent SOA attacks on RESTful web services along the discussion on the obtained results of the conducted proof-of-concept on the real-time SOA environment. A comparison of the proposed system with other competing solutions demonstrates its superiority.},
   author = {Mohamed Ibrahim Beer and Mohd Fadzil Hassan},
   doi = {10.1007/s11761-017-0221-1},
   issn = {18632394},
   issue = {2},
   journal = {Service Oriented Computing and Applications},
   keywords = {EAI,REST,SOA,Security,Web services},
   month = {6},
   pages = {111-121},
   publisher = {Springer London},
   title = {Adaptive security architecture for protecting RESTful web services in enterprise computing environment},
   volume = {12},
   year = {2018},
}
@article{Alshraiedeh2021,
   abstract = {Purpose: Many REpresentational State Transfer (RESTful) Web services suffered from anti-patterns problem, which may diminish the sustainability of the services. The anti-patterns problem could happen in the code of the programme or the uniform resource identifiers (URIs) of RESTful Web services. This study aims to address the problem by proposing a technique and an algorithm for detecting anti-patterns in RESTful Web services. Specifically, the technique is designed based on URIs parsing process. Design/methodology/approach: The study was conducted following the design science research process, which has six activities, namely, identifying problems, identifying solutions, design the solutions, demonstrate the solution, evaluation and communicate the solution. The proposed technique was embedded in an algorithm and evaluated in four phases covering the process of extracting the URIs, implementing the anti-pattern detection algorithm, detecting the anti-patterns and validating the results. Findings: The results of the study suggested an acceptable level of accuracy for the anti-patterns detection with 82.30% of precision, 87.86% of recall and 84.93% of F-measure. Practical implications: The technique and the algorithm can be used by developers of RESTful Web services to detect possible anti-pattern occurrences in the service-based systems. Originality/value: The technique is personalised to detect amorphous URI and ambiguous name anti-patterns in which it scans the Web service URIs using specified rules and compares them with pre-determined syntax and corpus.},
   author = {Fuad Sameh Alshraiedeh and Norliza Katuk},
   doi = {10.1108/IJWIS-08-2020-0052},
   issn = {17440092},
   issue = {1},
   journal = {International Journal of Web Information Systems},
   keywords = {Anti-patterns,Distributed computer systems,Information services,Quality of service,Resource-oriented architecture,Schema,Semantic,Semantic Web,Service-oriented architecture,Software architecture,Web services},
   month = {1},
   pages = {1-17},
   publisher = {Emerald Group Holdings Ltd.},
   title = {A URI parsing technique and algorithm for anti-pattern detection in RESTful Web services},
   volume = {17},
   year = {2021},
}
@inproceedings{jatkiewicz2023differences,
  title={Differences in performance, scalability, and cost of using microservice and monolithic architecture},
  author={Jatkiewicz, Przemys{\l}aw and Okr{\'o}j, Szymon},
  booktitle={Proceedings of the 38th ACM/SIGAPP Symposium on Applied Computing},
  pages={1038--1041},
  year={2023}
}

@misc{NestJS, 
  url={https://nestjs.com/}, 
  journal={NestJS},
  title={NestJS Documentation},
  author={Kamil Mysliwiec}
}

@misc{Prisma, 
  url={https://www.prisma.io/}, 
  journal={Prisma},
  title={PrismaJS Documentation},
  author={Prisma Data, Inc}
} 

@article{pham2020developing,
  title={Developing back-end of a web application with NestJS framework: Case: Integrify Oy’s student management system},
  author={Pham, Anh Duc},
  year={2020}
}

@article{farid2021implementasi,
  title={Implementasi CI/CD Pipeline Pada Framework Androbase Menggunakan Jenkins (Studi Kasus: PT. Andromedia)},
  author={Farid, Ahmad and Anugrah, Indra Gita},
  journal={Jurnal Nasional Komputasi dan Teknologi Informasi},
  volume={4},
  number={6},
  pages={522--527},
  year={2021},
  publisher={Jurnal Nasional Komputasi dan Teknologi Informasi}
}

@article{soplanit2023penerapan,
  title={Penerapan Version control system Berbasis Web Menggunakan Next. JS, Nest. JS, Node. JS, dan MongoDB Pada Proses Pengerjaan Skripsi Mahasiswa},
  author={Soplanit, Axsel Riando and Supiyanto, S and Saputro, Agung Dwi and Kmurawak, Remuz MB and Sampebua, Mingsep Rante},
  journal={Jurasik (Jurnal Riset Sistem Informasi dan Teknik Informatika)},
  volume={8},
  number={2},
  pages={361--370},
  year={2023}
}

@article{saepuloh2022perancangan,
  title={PERANCANGAN SISTEM INFORMASI MANAJEMEN PROYEK DENGAN MENGGUNAKAN SOFTWARE NEST. JS BERBASIS WEB DI PT. MITRA PAJAKKU},
  author={Saepuloh, Acep Muhamad and Ginting, Seliwati},
  journal={INFOKOM (Informatika \& Komputer)},
  volume={10},
  number={1},
  pages={1--9},
  year={2022}
}

@CONFERENCE{Pant2022781,
	author = {Pant, Piyush and Rajawat, Anand Singh and Goyal, S.B. and Bedi, Pradeep and Verma, Chaman and Raboaca, Maria Simona and Enescu, Florentina Magda},
	title = {Authentication and Authorization in Modern Web Apps for Data Security Using Nodejs and Role of Dark Web},
	year = {2022},
	journal = {Procedia Computer Science},
	volume = {215},
	pages = {781 - 790},
	doi = {10.1016/j.procs.2022.12.080},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85163717776&doi=10.1016%2fj.procs.2022.12.080&partnerID=40&md5=dc3879ee3f4f1d4a1de4dcc458ec2597},
	abstract = {Authentication and Authorization are the base of security for all the Technologies present in this world today. Starting from your smartphone where a user authenticates himself before he could access the data inside to Entering into the White House, you must authenticate yourself, and based on that you are authorized. In this digital world where every Business, MNC, Government Body, Companies, Users, etc. needs a website to inform the world about their presence on the internet, provide services online and become a "Brand", the risk of leaking user's sensitive information increases. It could be dangerous to the users of the hacked website because their sensitive information like a credit card, bank account details, etc. could be sold in the black market of the "dark web". The role of the dark web is described in the paper and how the data is sold there and what becomes of it. The paper helps to understand how a secure website is developed that promises the user to keep the sensitive information safe, increases the bond of trust between a client and server which results in a long-term relationship. The aim behind developing an authentication system is to keep users' sensitive information safe so that hackers cannot steal and sell the information on the dark web's back market. To perform this, the developer needs to understand how to implement authentication. NodeJS, with the help of its framework expressJS and some other packages, is used to develop the authentication and authorization system of the website by the research. Previous papers on this field covered the authentication topic in general. This paper overcame that by going deeper into the field and being server-side language specific. The common types of authentication methods used in different types of websites are discussed in detail and the best methods are purposed for the developer to be implemented for a more secure website. This research put light on Artificial Intelligence and blockchain as the future of security of big data. © 2023 The Authors. Published by Elsevier B.V.},
	keywords = {Artificial intelligence; Authentication; Authorization; Blockchain; Commerce; Personal computing; Sensitive data; Authentication and authorization; Authentication systems; Block-chain; Dark web; Hashing algorithms; MongoDB; Nodejs; Sensitive informations; Smart phones; Web App; Websites},
	publisher = {Elsevier B.V.},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 2; All Open Access, Gold Open Access}
}

@CONFERENCE{William2020,
	author = {William, George and Anthony, Randy and Purnama, James},
	title = {Development of NodeJS based Backend System with Multiple Storefronts for Batik Online Store},
	year = {2020},
	journal = {ACM International Conference Proceeding Series},
	doi = {10.1145/3429789.3429830},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097347349&doi=10.1145%2f3429789.3429830&partnerID=40&md5=9bbfbc1ee0a872bea2b595b380fca24c},
	abstract = {Inibatikita is an online clothing store company which sells its products through multiple online stores, each of which is associated with a partner influencer. Currently, there exist no ecommerce solution which can accommodate this business process. This research aims to develop a system which facilitates this business process while addressing scalability for up to 50000 users. After the requirements are gathered, a system analysis is performed to compare existing ecommerce solutions with a custom solution. Post analysis, system design takes place and is swiftly followed by development and testing; finishing with deployment of the system. The results of system analysis indicate that existing ecommerce solutions aren't able to accommodate a multiple store approach, while a custom NodeJS solution is capable of doing so. Development and testing then proves that a NodeJS solution is able to fulfill the business process while accommodating 50000 users through indexing and caching. The results show that a custom NodeJS solution addresses the business requirements and scalability of inibatikita, when existing solutions could not. © 2020 Association for Computing Machinery.},
	publisher = {Association for Computing Machinery},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0}
}

@article{kundu2017research,
  title={Research of persistence solution based on ORM and hibernate technology},
  author={Kundu, Pooja and Arora, Twinkle},
  journal={International Journal},
  volume={7},
  number={4},
  year={2017}
}

@ARTICLE{Bucko2023,
	author = {Bucko, Ahmet and Vishi, Kamer and Krasniqi, Bujar and Rexha, Blerim},
	title = {Enhancing JWT Authentication and Authorization in Web Applications Based on User Behavior History},
	year = {2023},
	journal = {Computers},
	volume = {12},
	number = {4},
	doi = {10.3390/computers12040078},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85153940169&doi=10.3390%2fcomputers12040078&partnerID=40&md5=92a04bd147f2966bc020dd21ceb06122},
	abstract = {The rapid growth of the web has transformed our daily lives and the need for secure user authentication and authorization has become a crucial aspect of web-based services. JSON Web Tokens (JWT), based on RFC 7519, are widely used as a standard for user authentication and authorization. However, these tokens do not store information about the user’s behavior history. To address this issue, this paper presents a solution to enhance the trustworthiness of user authentication in web applications based on their behavior history. The solution considers factors such as the number of password attempts, IP address consistency, and user agent type and assigns a weight or percentage to each. These weights are summed up and stored in the user’s account, and updated after each transaction. The proposed approach was implemented using the.NET framework, C# programming language, and PostgreSQL database. The results show that the proposed solution effectively increases the level of trust in user authentication. The paper concludes by highlighting the strengths and limitations of the proposed solution. © 2023 by the authors.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

